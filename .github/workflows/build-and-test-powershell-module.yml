name: build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  powerShellModuleName: 'tiPS'
  powerShellModuleDirectoryPath: './src/tiPS'
  powerShellModuleManifestFileName: 'tiPS.psd1'
  prereleaseModuleDirectoryPath: './artifacts/Prerelease'
  stableModuleDirectoryPath: './artifacts/Stable'
  prereleaseModuleArtifactName: 'PrereleaseModuleArtifacts'
  stableModuleArtifactName: 'StableModuleArtifacts'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo source code
        uses: actions/checkout@v3

      - name: Display PowerShell version being used
        shell: pwsh
        run: $PSVersionTable

      - name: Generate PowerShellTips.json file
        shell: pwsh
        run: ./build/Convert-PowerShellTipFilesToJsonFile.ps1

      - name: Run PowerShell linter with PSScriptAnalyzer
        shell: pwsh
        run: Invoke-ScriptAnalyzer -Path . -Recurse -EnableExit -ExcludeRule PSAvoidUsingWriteHost

      - name: Run Pester Tests
        shell: pwsh
        run: |
          Write-Output "Pester version being used:"
          Import-Module -Name Pester
          Get-Module -Name Pester

          Write-Output "Running all Pester tests in the repo:"
          $pesterConfig = New-PesterConfiguration @{
              Output = @{ Verbosity = 'Detailed' }
              TestResult = @{ Enabled = $true }
              CodeCoverage = @{ Enabled = $false }
              Run = @{ Exit = $true }
            }
          Invoke-Pester -Configuration $pesterConfig

      - name: Create Stable and Prerelease module artifacts
        shell: pwsh
        run: |
          function Replace-TextInFile(
            [ValidateScript({Test-Path $_ -PathType Leaf})]
            [string]$filePath,
            [string]$textToReplace,
            [string]$replacementText)
          {
            $fileContents = Get-Content -Path $filePath -Raw
            $newFileContents = $fileContents.Replace($textToReplace, $replacementText)
            Set-Content -Path $filePath -Value $newFileContents
          }

          Write-Output "Reading in environment variables."
          [string] $moduleName = $Env:powerShellModuleName
          [string] $moduleDirectoryPath = $Env:powerShellModuleDirectoryPath
          [string] $moduleManifestFileName = $Env:powerShellModuleManifestFileName
          [string] $prereleaseModuleDirectoryPath = Join-Path -Path $Env:prereleaseModuleDirectoryPath -ChildPath $moduleName
          [string] $stableModuleDirectoryPath = Join-Path -Path $Env:stableModuleDirectoryPath -ChildPath $moduleName

          Write-Output "Determining what the module manifest file paths should be."
          [string] $manifestFilePath = Join-Path -Path $moduleDirectoryPath -ChildPath $moduleManifestFileName
          [string] $prereleaseManifestFilePath = Join-Path -Path $prereleaseModuleDirectoryPath -ChildPath $moduleManifestFileName
          [string] $stableManifestFilePath = Join-Path -Path $stableModuleDirectoryPath -ChildPath $moduleManifestFileName

          Write-Output "Retrieving the module manifest's current version number from '$manifestFilePath'."
          $manifestVersionNumberRegexPattern = "(?i)ModuleVersion = '(?<Version>.*?)'"
          $manifestVersionNumberMatches =
            Select-String -Path $manifestFilePath -Pattern $manifestVersionNumberRegexPattern |
            Select-Object -First 1
          if ($manifestVersionNumberMatches.Matches.Count -le 0 -or
            !$manifestVersionNumberMatches.Matches[0].Success)
          {
            throw "Could not find the manifest's current version number."
          }

          $manifestVersionNumberMatch = $manifestVersionNumberMatches.Matches[0]
          $currentManifestVersionNumber = $manifestVersionNumberMatch.Groups['Version'].Value
          $currentManifestVersionNumberLine = $manifestVersionNumberMatch.Value

          if (-not $currentManifestVersionNumber -match '\d+\.\d+\.\d+')
          {
            throw "The manifest's current version number '$currentManifestVersionNumber' is not in the correct format. We expect it to be in the format 'Major.Minor.Patch'."
          }

          Write-Output "Previous version number was '$currentManifestVersionNumber'. Determining what the new version number should be."
          $currentVersion = [System.Version]::new($currentManifestVersionNumber)
          $newVersion = [System.Version]::new($currentVersion.Major, $currentVersion.Minor, $currentVersion.Build + 1)
          [string] $newVersionNumber = $newVersion.ToString()
          [string] $dateTime = (Get-Date -Format 'yyyyMMddTHHmmss')
          [string] $prereleaseVersionNumberPostfix = "-ci-$dateTime"

          Write-Output "Copying the module files to the Prerelease directory '$prereleaseModuleDirectoryPath'."
          Copy-Item -Path $moduleDirectoryPath -Destination $prereleaseModuleDirectoryPath -Exclude '*.Tests.ps1' -Recurse -Force

          Write-Output "Copying the module files to the Stable directory '$stableModuleDirectoryPath'."
          Copy-Item -Path $moduleDirectoryPath -Destination $stableModuleDirectoryPath -Exclude '*.Tests.ps1' -Recurse -Force

          Write-Output "Updating the prerelease manifest's version number from '$currentManifestVersionNumber' to '$newVersionNumber$prereleaseVersionNumberPostfix'."
          Replace-TextInFile -filePath $prereleaseManifestFilePath -textToReplace $currentManifestVersionNumberLine -replacementText "ModuleVersion = '$newVersionNumber'"
          Replace-TextInFile -filePath $prereleaseManifestFilePath -textToReplace "# Prerelease = ''" -replacementText "Prerelease = '$prereleaseVersionNumberPostfix'"

          Write-Output "Updating the stable manifest's version number from '$currentManifestVersionNumber' to '$newVersionNumber'."
          Replace-TextInFile -filePath $stableManifestFilePath -textToReplace $currentManifestVersionNumberLine -replacementText "ModuleVersion = '$newVersionNumber'"

      - name: Upload prerelease module artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.prereleaseModuleArtifactName }}
          path: ${{ env.prereleaseModuleDirectoryPath }}

      - name: Upload stable module artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.stableModuleArtifactName }}
          path: ${{ env.stableModuleDirectoryPath }}
