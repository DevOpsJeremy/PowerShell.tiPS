name: deploy

on:
  workflow_run:
    workflows: [build]
    types: [completed]
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      workflowRunId:
        description: 'The build workflow run ID containing the artifacts to use. The run ID can be found in the URL of the build workflow run.'
        type: number
        required: true

env:
  powerShellModuleName: 'tiPS' # Must match the name in the build workflow.
  prereleaseModuleArtifactName: 'PrereleaseArtifacts' # Must match the name in the build workflow.
  stableModuleArtifactName: 'StableArtifacts' # Must match the name in the build workflow.
  artifactsDirectoryPath: './artifacts'
  artifactsDeployDirectoryPath: './artifacts/deploy'
  workflowRunId: ${{ github.event_name == 'workflow_dispatch' && inputs.workflowRunId || github.event.workflow_run.id }} # Ternary operator to use input value if manually triggered, otherwise use the workflow_run.id value.

jobs:
  publish-prerelease-module:
    # Only run the deployment if manually triggered, or the build workflow succeeded.
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    outputs:
      prereleaseVersionNumber: ${{ steps.output-version-number.outputs.prereleaseVersionNumber }}
    steps:
      - name: Download artifacts from triggered workflow
        uses: dawidd6/action-download-artifact@v2
        with:
          run_id: ${{ env.workflowRunId }}
          name: ${{ env.prereleaseModuleArtifactName}}
          path: ${{ env.artifactsDirectoryPath }}
          search_artifacts: true

      - name: Publish prerelease PowerShell module
        shell: pwsh
        run: |
          [string] $moduleDirectoryPath = "$Env:artifactsDirectoryPath/$Env:powerShellModuleName"
          Publish-Module -Path $moduleDirectoryPath -NuGetApiKey '${{ secrets.POWERSHELL_GALLERY_API_KEY }}' -Verbose

      - name: Make prerelease version number available to downstream jobs
        id: output-version-number
        shell: pwsh
        run: |
          [string] $moduleManifestPath = "$Env:artifactsDirectoryPath/$Env:powerShellModuleName/$Env:powerShellModuleName.psd1"
          Write-Output "Reading module manifest from '$moduleManifestPath'."
          [hashtable] $manifest = Get-Content -Path $moduleManifestPath -Raw | Invoke-Expression
          [string] $versionNumber = $manifest.ModuleVersion
          [string] $prereleasePostfix = $manifest.PrivateData.PSData.Prerelease
          [string] $prereleaseVersionNumber = "$versionNumber-$prereleasePostfix"

          Write-Output "Saving the prerelease version number '$prereleaseVersionNumber' to an environment variable."
          "prereleaseVersionNumber=$prereleaseVersionNumber" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

  test-prerelease-module:
    needs: publish-prerelease-module
    runs-on: ubuntu-latest
    steps:
      - name: Download prerelease module from PowerShell Gallery
        shell: pwsh
        run: |
          [string] $moduleName = $Env:powerShellModuleName
          [string] $prereleaseVersionNumber = '${{ needs.publish-prerelease-module.outputs.prereleaseVersionNumber }}'

          Write-Output "Installing the module '$moduleName' prerelease version '$prereleaseVersionNumber' from the PowerShell Gallery."
          Install-Module -Name $moduleName -AllowPrerelease -RequiredVersion $prereleaseVersionNumber -Force -Scope CurrentUser -Repository PSGallery
      - name: Run smoke tests
        shell: pwsh
        run: |
          [string] $smokeTestsScriptPath = "$Env:artifactsDeployDirectoryPath/Invoke-SmokeTests.ps1"

          Write-Output "Running Pester smoke tests from file '$smokeTestsScriptPath'."
          $pesterConfig = New-PesterConfiguration @{
            Output = @{ Verbosity = 'Detailed' }
            Run = @{
              Path = $smokeTestsScriptPath
              Throw = $true
            }
          }
          Invoke-Pester -Configuration $pesterConfig

  publish-stable-module:
    needs: test-prerelease-module
    runs-on: ubuntu-latest
    environment: production # Used for deployment approvals.
    outputs:
      stableVersionNumber: ${{ steps.output-version-number.outputs.StableVersionNumber }}
    steps:
      - name: Download artifacts from triggered workflow
        uses: dawidd6/action-download-artifact@v2
        with:
          run_id: ${{ env.workflowRunId }}
          name: ${{ env.stableModuleArtifactName}}
          path: ${{ env.artifactsDirectoryPath }}
          search_artifacts: true

      - name: Publish stable PowerShell module
        shell: pwsh
        run: |
          [string] $moduleDirectoryPath = "$Env:artifactsDirectoryPath/$Env:powerShellModuleName"
          Publish-Module -Path $moduleDirectoryPath -NuGetApiKey '${{ secrets.POWERSHELL_GALLERY_API_KEY }}' -Verbose

      - name: Make stable version number available to downstream jobs
        id: output-version-number
        shell: pwsh
        run: |
          [string] $moduleManifestPath = "$Env:artifactsDirectoryPath/$Env:powerShellModuleName/$Env:powerShellModuleName.psd1"
          Write-Output "Reading module manifest from '$moduleManifestPath'."
          [hashtable] $manifest = Get-Content -Path $moduleManifestPath -Raw | Invoke-Expression
          [string] $versionNumber = $manifest.ModuleVersion

          Write-Output "Saving the stable version number '$versionNumber' to an environment variable."
          "stableVersionNumber=$versionNumber" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

  test-stable-module:
    needs: publish-stable-module
    runs-on: ubuntu-latest
    steps:
      - name: Download stable module from PowerShell Gallery
        shell: pwsh
        run: |
          [string] $moduleName = $Env:powerShellModuleName
          [string] $stableVersionNumber = '${{ needs.publish-stable-module.outputs.stableVersionNumber }}'

          Write-Output "Installing the module '$moduleName' stable version '$stableVersionNumber' from the PowerShell Gallery."
          Install-Module -Name $moduleName -RequiredVersion $stableVersionNumber -Force -Scope CurrentUser -Repository PSGallery
      - name: Run smoke tests
        shell: pwsh
        run: |
          [string] $smokeTestsScriptPath = "$Env:artifactsDeployDirectoryPath/Invoke-SmokeTests.ps1"

          Write-Output "Running Pester smoke tests from file '$smokeTestsScriptPath'."
          $pesterConfig = New-PesterConfiguration @{
            Output = @{ Verbosity = 'Detailed' }
            Run = @{
              Path = $smokeTestsScriptPath
              Throw = $true
            }
          }
          Invoke-Pester -Configuration $pesterConfig
